name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Luflexia_WeatherService

      - name: Build Docker image
        run: docker build . -t backend-service:latest

      - name: Save Docker image as a file
        run: docker save backend-service:latest -o backend-service.tar

      - name: Upload Docker image to GitHub Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-service
          path: backend-service.tar

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker image from GitHub Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-service
          path: backend-service.tar

      - name: Load Docker image
        run: docker load -i backend-service.tar

      - name: Install Render CLI
        run: curl -fsSL https://render.com/deploy | bash

      - name: Login to Render CLI
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: render login --api-key ${{ secrets.RENDER_API_KEY }}

      - name: Deploy to Render.com
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          render service create \
            --name backend-service \
            --env production \
            --image backend-service:latest \
            --port 8080 \
            --env DATABASE_URL=${{ secrets.DATABASE_URL }}
